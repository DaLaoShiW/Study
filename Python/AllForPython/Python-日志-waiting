1. 日志可以输出到任何的目标，包含
    * 终端
    * 文件
    * 网络传输
2. 打印日志的目的
    1. 调试开发
        日志量大且没有实际意义(对用户来说)
    2. 用户行为日志
        记录用户的操作行为
    3. 程序运行日志
        记录程序的运行状况，非预期的行为和异常的情况
    4. 记录系统和机器的状态
        记录网络请求，系统CPU,内存,I / O的使用情况，对系统出现问题的时候及时的预警
3. 打印什么内容
    日志是对事件的记录
    1. 打印时间
        是事件的发生时间，不是日志的输出的时间
        打印时间可以帮助我们分析出，当出现异常的时候会出现了什么情况
        当然时间不止仅限于时间点，我们有时候对于时间长度的输出信息也需要关注，表示了一段程序的运行的状态
        时间日志文件有时候需要排序辅助分析
    2. 日志的产生地点
        记录事件的发生的地点，哪一个模块，哪一个模块，哪一个函数等等
    3. 事件的重要性
        log level 代表了日志的重要性和紧急程度
        对于部分的事件重要性的区分如果不明确需要团队之间作出明确的分析和判断
    4. 日志的内容
        需要简明的现实发生了什么事情，需要做到我们可以通过日志可以发现什么问题而不是需要读取日志产生的那段代码
        1. Error Happend ? 
            这个日志并不是很好的，系统出现了问题但是我们从日志中看不出来到底出现了什么问题
    5. 日志的唯一标识性
        如果一条日志会被多次的出现，我们必须要对日志的出现做出唯一性的标识，如果不表标识，同一个日志的多次出现就会对我们造成迷惑
        日志的唯一标示可以帮助我们检索和过滤找出一些特定的日志加以分析
    6. 记录事件发生的上下文
        记录日志发生时的情况，日志发生的上下文，，对于我们明确错误来说有着非常重要的意义
4. Python如何输出日志
   1. 基本信息
        * log的等级
        * 日志的默认包含内容
            * 时间
            * 文件
            * 行号
            * 进程标识
            * 线程标识
        * name (module, classname, function name, ...)
        * 日志的输出目标
            * stdout
            * 文件
            * internet
            * Linux中使用syslog进行辅助分析
    2. 注意事项
        1. 日志不能打扰程序的正常执行
        2. 低等级日志不能抛出异常
        3. 对你认为绝对不可能发生的日志进行设计
        4. 日志也是消耗时间的，有时候需要使用异步log来避免日志输出阻塞程序的运行
