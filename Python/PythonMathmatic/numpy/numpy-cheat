# This is the numpy cheat for my own
# 2018.8.7  GMFTBY

# numpy 库中只有两种对象, ndarray(多维数组对象), ufunc(通用函数对象)
import numpy as np

# 1. create and shape
a = np.array(list / tuple / iterations / ...)
a.shape
# 重新分配数组的不同的轴的长度，如果是-1代表自动计算，但是 x * y 的值和原来的数组中的元素的数目要一直否则报错
a.shape = x, y    
b = a.reshape((x, y, ...))    # 创建一个新的数组，和原来的数组共享存储空间
---

# 2. dtype
# 常用 type:
# np.int32, np.int64, np.uint32, np.float32, np.float64, np.time ...
# numpy 中的数据在做单个运算的时候速度很慢，但是在大规模计算中速度很快
a = np.array(list / tuple / iterations / ..., dtype=np.int32)
a.dtype
b = a.astype(np.int32 / ...)    # 重新构建新的类型的数组，不共享存储空间
---

# 3. create origin ndarray instead of list or tuple from Python
np.arange(start, end, step, dtype)    # 构建等差序列，不包含 end, dtype 可以修正数据类型
np.linspace(start, end, num, endpoint=True, dtype=...)    # 构建等差序列，默认包含end数，count 是序列中的元素的数目
# 同山，不过是等比序列，指数的基默认是10可以修改
np.logspace(start, end, num, endpoint=True, base=10.0, dtype=...)
np.empty(shape, dtype)    # fastest init
np.zeros(shape, dtype)
np.full(shape, fill_value, dtype)    # 固定值填充
np.fromfunction(func / lambda, shape)    # func 的输入参数是 shape 的下标，下表计算数组结果
np.eye(n)             # 构建n维 I 单位方阵
---

# 4. get the data from ndarray
# 新得到的数组是原来的数组的一个视图，换句话说是共享存储空间的
a = np.array(list / ...)
a[start_index:end_index:step]    # 不包含 end_index, step 负数表示反向提取
a[si:ei:st] = ...    # 修改原来的数组
a[[1, 2, 3, 4]] = ...   # 安装对应的下表提取元素，不共享内存,多维数组相同
a[np.array(shape=2,2)] = ...    # 结果 shape = 2, 2
a[[True, ...]] = ...    # 布尔数组和布尔列表只提取对应为 True 的位置的数据
---

# 5. 多维数组
# 多维数组使用元组作为下标的根本语法
# 如果下标元组中只包含由整数和切片，新数组和原数组共享数据，但是下标元组中如果存在有整数数组，列表或者布尔数组等等，新数组是原数组的副本不共享数据(因为使用了数组的索引和切片与整数不同，是在数组上多次不均采样的过程，无法有效的构建视图，但是整数和切片的规律性导致可以构建视图返还)
# 维度不够，缺省是 : 全部选择
a = np.random.randint(0, 10, (5, 5))
a[np.array([[0, 1], [1, 2]])]
---

# 6. 内存结构
struct {
    1. dtype
    2. strides: 存储相邻元素的地址差(字节数)
    3. flags: 查看属性标志
}
---

# ufunc
np.sin(x)    # out 决定将结果返还给一个新的对象，可以是 x
ndarray.item(pos)    # get the data with the pos quickly

# 在利用下面的重载运算符的过程中，需要注意复杂的计算表达式会出现很多的临时数组降低性能，需要合理安排
# element-wise
x += y
x = x + y
x -= y
x = x - y
x *= y
x = x * y
x //= y
x = x // y
x /= y
x = x / y
x **= y
x = x ** y

# 掩码数组，布尔数组的创建
y = x1 == x2
y = x1 != x2
y = x1 < x2
y = x1 > x2
y = x1 <= x2
y = x1 >= x2
# 逻辑运算符
np.logical_and(x, y)    # &
np.logical_not(x, y)    # !
np.logical_or(x, y)     # |
np.logical_xor(x, y)    # xor
np.any(x)               # return true if exist one is true
np.all(x)               # return true if all element is true
---

# 7. broadcast
# ufunc 要求对数组的对应元素进行计算 element-wise 但是当需要运算的数组的规模不相同的时候需要进行广播处理
# 广播的原则:
# 1. 所有的输入数组都看齐维数最多的数组，shape中维度不足的在前面补1
# 2. 输出数组的shape是所有输入数组的shape上的最大值
# 3. 如果输入数组的轴的长度是1或者与输出数组的轴长相同，可以广播运算否则不可以
# 4. 当轴长是1的时候，沿着这个轴的运算复用第一个元素
---

# 8. 函数库
np.nonzero(x)    # x中不为0的元素的下标
np.random.rand(shape)    # 0 ~ 1
np.random.randn(shape)   # 标准正太分布
np.random.randint(low, high , shape)    # [low, high) 
np.random.normal(mean, div, shape)      # 制定均值和方差的正态分布
np.random.uniform(low, high ,shape)     # low - high 之间的均匀分布
np.random.poisson(lambda_p, shape)      # 泊松分布
np.random.shuffle(x)                    # 打乱顺序
np.random.choice(a, shape, replace, p)  # shape 输出形状，replace 表示是否重复抽取，p表示对应的采样概率
np.random.seed(40)                      # 设置随机种子

np.sum(x, axis=...)                     # axis=0列,axis可以是轴的列表
np.mean(x, axis=...)
np.average(x, weights)                  # 加权平均
np.std(x, axis=...)                     # 标准差
np.var(x, axis=...)                     # 方差

np.min(x, axis=...)
np.max(x, axis=...)
np.ptp(x, axis=...)                     # 计算最大值和最小值的差
np.argmax(x, axis=...)                  # 返回最大值的下标
np.argmin(x, axis=...)
np.sort(x, axis=...)

np.dot(a, b)                            # 矩阵乘法
np.inner(a, b)                          # 张量内积
---


# TO BE CONTINUED ...

